{
  "ver": "1.0.25",
  "uuid": "05e84cbe-78cf-4eda-a911-809e33c45196",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nvarying mediump vec2 v_uv0;\nvarying vec4 v_color;\nuniform lowp float wipe;\nuniform lowp float start_angle;\nuniform lowp float rx;\nuniform lowp float ry;\nuniform lowp float rw;\nuniform lowp float rh;\nuniform lowp float tw;\nuniform lowp float th;\nfloat get_angle(vec2 v1, vec2 v2){\n  return atan(v1.x * v2.y - v1.y * v2.x, v1.x * v2.x + v1.y * v2.y);\n}\nvoid main () {\n  vec4 color = v_color;\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  vec2 start_vector = vec2(sin(-start_angle*0.0174532925199432957692369076849),cos(-start_angle*0.0174532925199432957692369076849))*vec2(tw/rw,th/rh);\n  vec2 uv_fix = (v_uv0-vec2(rx/tw,ry/th))*vec2(tw/rw,th/rh);\n  float angle = get_angle(uv_fix-vec2(0.5,0.5),start_vector);\n  if(angle+wipe*0.0174532925199432957692369076849 > 3.1415926535897932384626433832795){\n    color.a = 0.0;\n  }\n  gl_FragColor = vec4(color.r, color.g, color.b, color.a);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin mediump vec2 a_uv0;\nout mediump vec2 v_uv0;\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nin mediump vec2 v_uv0;\nin vec4 v_color;\nuniform WipeShader {\n  lowp float wipe;\n  lowp float start_angle;\n  lowp float rx;\n  lowp float ry;\n  lowp float rw;\n  lowp float rh;\n  lowp float tw;\n  lowp float th;\n};\nfloat get_angle(vec2 v1, vec2 v2){\n  return atan(v1.x * v2.y - v1.y * v2.x, v1.x * v2.x + v1.y * v2.y);\n}\nvoid main () {\n  vec4 color = v_color;\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  vec2 start_vector = vec2(sin(-start_angle*0.0174532925199432957692369076849),cos(-start_angle*0.0174532925199432957692369076849))*vec2(tw/rw,th/rh);\n  vec2 uv_fix = (v_uv0-vec2(rx/tw,ry/th))*vec2(tw/rw,th/rh);\n  float angle = get_angle(uv_fix-vec2(0.5,0.5),start_vector);\n  if(angle+wipe*0.0174532925199432957692369076849 > 3.1415926535897932384626433832795){\n    color.a = 0.0;\n  }\n  gl_FragColor = vec4(color.r, color.g, color.b, color.a);\n}"
      }
    }
  ],
  "subMetas": {}
}